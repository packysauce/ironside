use super::data::Command;

impl TryFrom<u8> for Command {
    type Error = ();
    fn try_from(value: u8) -> Result<Self, Self::Error> {
        let out = match value { 19u8 => "queue_step oid=%c interval=%u count=%hu add=%hi" , 2u8 => "finalize_config crc=%u" , 9u8 => "endstop_query_state oid=%c" , 34u8 => "config_thermocouple oid=%c spi_oid=%c thermocouple_type=%c" , 53u8 => "query_thermocouple oid=%c clock=%u rest_ticks=%u min_value=%u max_value=%u" , 69u8 => "debug_nop" , 6u8 => "clear_shutdown" , 11u8 => "trsync_set_timeout oid=%c clock=%u" , 57u8 => "config_hd44780 oid=%c rs_pin=%u e_pin=%u d4_pin=%u d5_pin=%u d6_pin=%u d7_pin=%u delay_ticks=%u" , 3u8 => "config_trsync oid=%c" , 26u8 => "st7920_send_data oid=%c data=%*s" , 33u8 => "trsync_start oid=%c report_clock=%u report_ticks=%u expire_reason=%c" , 50u8 => "spi_set_software_bus oid=%c miso_pin=%u mosi_pin=%u sclk_pin=%u mode=%u rate=%u" , 43u8 => "get_clock" , 16u8 => "stepper_stop_on_trigger oid=%c trsync_oid=%c" , 63u8 => "get_config" , 13u8 => "get_uptime" , 51u8 => "neopixel_update oid=%c pos=%hu data=%*s" , 56u8 => "config_spi_without_cs oid=%c" , 15u8 => "config_pwm_out oid=%c pin=%u cycle_ticks=%u value=%hu default_value=%hu max_duration=%u" , 59u8 => "spi_send oid=%c data=%*s" , 31u8 => "hd44780_send_data oid=%c data=%*s" , 39u8 => "emergency_stop" , 68u8 => "config_i2c oid=%c i2c_bus=%u rate=%u address=%u" , 28u8 => "reset_step_clock oid=%c clock=%u" , 42u8 => "config_counter oid=%c pin=%u pull_up=%c" , 47u8 => "debug_write order=%c addr=%u val=%u" , 20u8 => "allocate_oids count=%c" , 49u8 => "hd44780_send_cmds oid=%c cmds=%*s" , 35u8 => "spi_transfer oid=%c data=%*s" , 4u8 => "query_counter oid=%c clock=%u poll_ticks=%u sample_ticks=%u" , 55u8 => "query_adxl345_status oid=%c" , 29u8 => "i2c_modify_bits oid=%c reg=%*s clear_set_bits=%*s" , 65u8 => "config_tmcuart oid=%c rx_pin=%u pull_up=%c tx_pin=%u bit_time=%u" , 14u8 => "endstop_home oid=%c clock=%u sample_ticks=%u sample_count=%c rest_ticks=%u pin_value=%c trsync_oid=%c trigger_reason=%c" , 52u8 => "debug_read order=%c addr=%u" , 22u8 => "config_endstop oid=%c pin=%c pull_up=%c" , 46u8 => "set_digital_out_pwm_cycle oid=%c cycle_ticks=%u" , 61u8 => "trsync_trigger oid=%c reason=%c" , 10u8 => "query_adxl345 oid=%c clock=%u rest_ticks=%u" , 30u8 => "config_adxl345 oid=%c spi_oid=%c" , 48u8 => "queue_pwm_out oid=%c clock=%u value=%hu" , 27u8 => "query_analog_in oid=%c clock=%u sample_ticks=%u sample_count=%c rest_ticks=%u min_value=%hu max_value=%hu range_check_count=%c" , 7u8 => "set_digital_out pin=%u value=%c" , 24u8 => "config_digital_out oid=%c pin=%u value=%c default_value=%c max_duration=%u" , 17u8 => "debug_ping data=%*s" , 32u8 => "buttons_add oid=%c pos=%c pin=%u pull_up=%c" , 18u8 => "set_pwm_out pin=%u cycle_ticks=%u value=%hu" , 66u8 => "update_digital_out oid=%c value=%c" , 36u8 => "i2c_write oid=%c data=%*s" , 1u8 => "identify offset=%u count=%c" , 23u8 => "config_spi_shutdown oid=%c spi_oid=%c shutdown_msg=%*s" , 67u8 => "queue_digital_out oid=%c clock=%u on_ticks=%u" , 64u8 => "set_next_step_dir oid=%c dir=%c" , 41u8 => "spi_set_bus oid=%c spi_bus=%u mode=%u rate=%u" , 45u8 => "config_stepper oid=%c step_pin=%c dir_pin=%c invert_step=%c step_pulse_ticks=%u" , 37u8 => "reset" , 62u8 => "st7920_send_cmds oid=%c cmds=%*s" , 40u8 => "neopixel_send oid=%c" , 38u8 => "config_st7920 oid=%c cs_pin=%u sclk_pin=%u sid_pin=%u sync_delay_ticks=%u cmd_delay_ticks=%u" , 8u8 => "buttons_ack oid=%c count=%c" , 58u8 => "config_neopixel oid=%c pin=%u data_size=%hu bit_max_ticks=%u reset_min_ticks=%u" , 5u8 => "config_buttons oid=%c button_count=%c" , 21u8 => "buttons_query oid=%c clock=%u rest_ticks=%u retransmit_count=%c invert=%c" , 54u8 => "config_analog_in oid=%c pin=%u" , 60u8 => "i2c_read oid=%c reg=%*s read_len=%u" , 25u8 => "stepper_get_position oid=%c" , 44u8 => "tmcuart_send oid=%c write=%*s read=%c" , 12u8 => "config_spi oid=%c pin=%u", _ => return Err (()) , } ;
        Ok(Command(out.to_string()))
    }
}
